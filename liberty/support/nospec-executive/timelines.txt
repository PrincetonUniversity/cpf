This document describes sequences of events (API calls) which the parallel
program triggers.

                                                    called by main?   called by worker?    called during recovery
         U __specpriv_num_available_workers                 X
         U __specpriv_begin_invocation                      X
         U __specpriv_end_invocation                        X
         U __specpriv_spawn_workers                         X
         U __specpriv_join_children                         X

         U __specpriv_worker_finishes                                         X

         U __specpriv_create_queue                          X
         U __specpriv_reset_queue                                                                     X
         U __specpriv_free_queue                            X

         U __specpriv_consume                                                 X
         U __specpriv_produce                                                 X

         U __specpriv_begin_iter                                              X
         U __specpriv_end_iter                                                X

         U __specpriv_misspec_iter                                                                    X
         U __specpriv_current_iter                                            X                       X
         U __specpriv_last_committed                                                                  X
         U __specpriv_recovery_finished                                                               X


Recovery never happens during non-speculative parallel regions, but the code
generator is shared with speculative parallelization.  Thus the code generator
inserts a recovery function which calls those methods.  The non-speculative
runtime library can implement __specpriv_reset_queue, __specpriv_misspec_iter,
__specpriv_last_committed, and __specpriv_recovery_finished as no-ops.





******************************************************************
At a very high level, a parallel region looks like this:

  __specpriv_begin_invocation

  do // this is the speculative-recovery loop; created by compiler
  {
    __specpriv_spawn_workers
    if( worker process )
    {
      for i // loop from the source programm; modified by compiler
      {
        __specpriv_begin_iter

        // Some source ops are rematerialized here, such as increment CIV

        if( i % NUM_WORKERS == MY_WORKER_ID )
        {

          // loop body

        }
        __specpriv_end_iter
      }
      
      // this will terminate the worker
      __specpriv_worker_finishes
    }
    else if( main process )
    {
      __specpriv_join_children

      if( misspec )
      {
        // do recovery

        __specpriv_recovery_finished
      }
    }

  } while( misspec )

  __specpriv_end_invocation


