****************************************************
*  Common sources of problems with LAMPView        *
*     Experiences from Thomas so you don't have to *
*     cry while using his tool like he did.        *
*						   *
*        -- TRM 10/10/2009			   *
****************************************************

This covers most of the problems I've seen with LAMPView.
As a primer on the unformatted LAMP Reader files:

lcout.out is all loop-carried dependences
 FORMAT: [var1 @ fn * bb -- var2 @ fn * bb] line1#line2# LAMPDATABLAH 
              Loop: loop_id T: times_manifetedP: frac_manifested  1
dout.out is all intra-iteration dependences
 FORMAT: [var1 @ fn * bb -- var2 @ fn * bb] line1#line2# LAMPDATABLAH 
              Loop: loop_id T: times_manifetedP: frac_manifested  1
auxout.out is a combination of the two in cases where recursion
     worked to find variable  names in the LAMP Reader.
 FORMAT: [var1 @ fn * bb -- var2 @ fn * bb] loop_carried line1#line2# 
              Loop: loop_id $$
(in all 3 cases, var1 depends on var2)

loops.out is generated by LAMPProfiling for loop id to line# 
     translation for the loop dump utilities
 FORMAT: lamp_loop_id line_num fn

-- I recommend you use the loop dump utlities for loop analysis 
  for purposes of parallelization.  
-- Use the search utilities to target functions or root out more 
  information about variables/intra-iteration flow dependences.
-- Though formatting is not totally readable, the Reader *.out files 
  can provide more meaning to the formatted utility output.  This is 
  the only place where fraction of times manifested vs total iterations 
  exists, for example.
-- Since LAMP does not generate dependence distance by default, I do 
  nothing with this data.
-- See my thesis if you really want more.



So instrumentation fails...

   1) Did you use the loop-simplify pass first?  If you don't, there
   WILL be a segfault on all but the simplest programs.

   2) Did you emit llvm bitcode properly?  Don't be dumb like me.

So your program crashes when running after instrumentation...

   1) Is LAMP_init getting called before ANY other LAMP library
   functions?  The error message is usually a vector-out-of-range
   error in this case.  Make sure you passed the FIRST called function
   to -lamp-init-fn in the instrumentation pass.

   2) Did you link ALL object files of interest into a single object
   file before performing instrumentation?  If not, it may be the case
   that your init function was not found causing the above problem.

   3) Is there a HUGE recursive call-depth that calls through loops?
   If so, you're likely to get an error message similar to the one
   above.  The version of lamp_hooks.cxx included in this directory is
   modified to deal with huge recursive call-depths by providing a
   larger loop stack, but if you're using the original version, this
   may be a problem.

So your results look... weird...

   Are there more than 1000 loops in your program?  If so, the stupid
   hack I made for tracking total loop iterations could be screwing
   you up.  Increase the number that is #defined in lamp_hooks.cxx and
   LAMPReader.cpp or fix the hack to real code.

So the LAMP Reader (LAMPLoadProfile) fails...

   Did you use my version of lamp_hooks.cxx?  LAMP Reader expects a
   prefix to the normal profile results file that gives total
   iteration counts of all loops.

So the LAMP Reader generates... weird/incomplete value info in
output...

   Unfortunately, this is likely the result of base limitations in the
   LLVM bytecode.  I can only retrieve name information in the
   majority of cases, not all (failed attempts at variable names in
   lcout.out and dout.out get recursively tried and then spit to
   auxout.out), 

   Sometimes debug information gets lost(?) and so line numbers will
   appear as UNKNOWN in lcout.out, dout.out, and auxout.out.  In this
   case for loops, loops.out will show loops as occuring on line 0 in
   this case, and occasionally loops get assumed to be 2 lines above
   where they actually are, weird, I know.

So LAMPDumpLoops/LAMPDumpLoopsLO can't find loops.out...

   Did you enable LAMPView when compiling LAMPProfiling?  I didn't
   want this to impede normal LAMP operations, so if you want to use
   LAMPView, enable it with the parameter mentioned in the readme!  
   (It's actually only necessary for the dump-Loops utilities).

So you want to punish yourself with C++ analysis...

   C++ files screw with LAMP Reader.  In these cases, the LAMP Reader
   spews blank bb and variable names and painfully long function
   names.  Since the utilities expect properly constructed *.out
   files, the current recourse (I only tried one C++ benchmark and it
   made me want to die) is to preprocess the out files to add bogus
   names like "nul" in the blanks.  Since C++ name mangling blows, you
   ought use only the Lines-Only utility versions unless you
   appreciate pain even more than I suspected.  
   Masochist.



