********************************************************
*  Using my mediocre LAMP instrumentation Passes       
*                                                      
*  README					       
*  10/16/2008					       
*  						       
*  Thomas R. Mason				       
*						       
********************************************************

USE LOOPSIMPLIFY PASS BEFORE LAMP INSTRUMENTATION

ENABLE LAMPView in LAMPProfiling with -lamp-view-switch enable parameter


To run instrumentation passes using LLVM's opt.  Note optional
parameter lamp-init-fn that changes the default function to be
instrumented from main to a provided function name; this function
should be the FIRST among all instrumented functions to be called...
e.g.:

   opt -load LLVMINSTALL_DIR/lib/libLAMP.so -debug 
       -lamp-insts -insert-lamp-profiling -lamp-view-switch enable 
       -insert-lamp-loop-profiling
       [-lamp-init-fn FUNCTIONNAME] -insert-lamp-init 
       < BCFILE > INSTRUMENTEDBCFILE

To run load profile passes using LLVM's opt... e.g.:

   opt -load LLVMINSTALL_DIR/lib/libLAMP.so -debug 
       -lamp-inst-cnt -lamp-map-loop -lamp-load-profile
       < BCFILE > FILENAME

Note that the passes must be performed in the given order for reasons 
  explained in the over-documented LAMPProfiling.cpp I wrote.  
  lamp-insts is the only truly independent pass in this set.

To link to Easwaran's LAMP library, you only need to link the 
  lamp_hooks object file in  
  trunk/integrate-dswp/liberty/src/compiler/src/support/lamp-profiler/lamp_hooks.o 
	This step can be done using g++. e.g.:

   g++ -o EXECFILE INSTRUMENTED_FILES.S lamp_hooks.o

   

Example full pass and profile generation:

llvm-gcc -emit-llvm -o main.bc -c main.c
opt -load ~/llvm/llvm-install/lib/libLAMP.so -debug -lamp-insts 
    -insert-lamp-profiling -insert-lamp-loop-profiling -insert-lamp-init
    < main.bc > main.lamp.bc
llc < main.lamp.bc > main.lamp.s
g++ -o main.lamp.exe main.lamp.s lamp_hooks.o

./main.lamp.exe


*******************************************************
* Notice : Use with Optimization and other passes     *
*						      *
* If you wish to use lamp-load-profile for generating *
*  human-readable profile information, must add -g    *
*  debug flag to llvm-gcc to get line numbers	      *
*  Can use llvm-link to link many c files first	      *
*******************************************************

llvm-gcc -O3 -g -emit-llvm -c *.c
llvm-link *.o -o main.bc
opt -loopsimplify < main.bc > main.ls.bc 
opt -load ~/llvm/llvm-install/lib/libLAMP.so -debug -lamp-insts 
    -insert-lamp-profiling -lamp-view-switch enable 
    -insert-lamp-loop-profiling [-lamp-init-fn main] 
    -insert-lamp-init < main.ls.bc > main.lamp.bc
llc < main.lamp.bc > main.lamp.s
g++ -o main.lamp.exe main.lamp.s lamp_hooks.o

./main.lamp.exe
opt -load ~/llvm/llvm-install/lib/libLAMP.so -debug -lamp-inst-cnt 
    -lamp-map-loop -lamp-load-profile < main.ls.bc > /dev/null

  ** Loopsimplify might change the number of loops and
	   the lamp instrumentation increases the number of 
		 function calls. To make sure the ID-Loop map is 
		 correct, the load-profile pass has to have loop-simplified 
		 bitcode file as input. (Note: Not bitcode generated by 
		 llvm-gcc or after LAMP instrumentation )

*******************************************************
* Changes in New Version  - Po-Chun Hsu  - 02/20/2009 *
*******************************************************

1. Fix the segfault problem in instrumenting floating point store.

2. Fix the over instrumentation problem when the same loop exits 
   through the same exit block more than one time.

*******************************************************
* Changes in LAMPView-compatible Version	      *
*   - TRM 10/10/2009		                      *
*******************************************************

1. LAMP_init will now be added to the desired function by cmdline
   param, not hardcoded, allowing partial instrumentation of only
   files of interest and fixes cases where main is not called first.

2. LAMPProfiling passes condtionally compiled for LoopDump utility by
   defining LAMPView.

3. LAMPReader pass added to read and interpret LAMP profile with
   variable names, function names, and line numbers (if instrumented
   with -g at compile time)


LAMP Reader can be invoked after the profile has been generated:

opt -load ~/llvm/llvm-install/lib/libLAMP.so -debug -lamp-inst-cnt
    -lamp-map-loop -lamp-load-profile < LOOPSIMPLIFIED_BCFILE > /dev/null

e.g.:

opt -load ~/llvm/llvm-install/lib/libLAMP.so -debug -lamp-inst-cnt
    -lamp-map-loop -lamp-load-profile < main.ls.bc > /dev/null




For the curious, format of the result.lamp.profile
loop# #ofIterations
(i1_id cross_iter(0=no, 1=yes) loop_id i2_id (#_obs 0))




