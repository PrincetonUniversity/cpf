#define DEBUG_TYPE "loop-aa-to-aa"

#include "llvm/IR/Instructions.h"
#include "llvm/Pass.h"
#include "llvm/Analysis/AliasAnalysis.h"

#include "liberty/Analysis/LoopAA.h"

using namespace llvm;

class LoopAAToAA : public ModulePass, public AAResultBase<LoopAAToAA> {//AliasAnalysis {
//class LoopAAToAAResult : public AAResultBase<LoopAAToAAResult> {

public:
  static char ID;
  LoopAAToAA() : ModulePass(ID) {}

  bool runOnModule(Module &M) {
    InitializeAliasAnalysis(this);
    return false;
  }

  virtual AliasResult alias(const MemoryLocation &L1,
                            const MemoryLocation &L2) {

    const Value *V1 = L1.Ptr, *V2 = L2.Ptr;
    const unsigned Size1 = L1.Size, Size2 = L2.Size;

    liberty::LoopAA *aa = getAnalysis<liberty::LoopAA>().getTopAA();
    liberty::LoopAA::AliasResult AR = aa->alias(V1, Size1,
                                                liberty::LoopAA::Same,
                                                V2, Size2,
                                                NULL);

    if(AR == liberty::LoopAA::MustAlias)
      return MustAlias;

    if(AR == liberty::LoopAA::NoAlias)
      return NoAlias;

    return AliasAnalysis::alias(V1, Size1, V2, Size2);
  }

  virtual ModRefInfo getModRefInfo(ImmutableCallSite CS,
                                     const MemoryLocation &L) {

    const Value *P = L.Ptr;
    const unsigned Size = L.Size;

    liberty::LoopAA *aa = getAnalysis<liberty::LoopAA>().getTopAA();
    liberty::LoopAA::ModRefResult MR = aa->modref(CS.getInstruction(),
                                                  liberty::LoopAA::Same,
                                                  P, Size,
                                                  NULL);

    if(MR == liberty::LoopAA::Mod)
      return ModRefInfo(AliasAnalysis::getModRefInfo(CS, P, Size) & MRI_Mod);

    if(MR == liberty::LoopAA::Ref)
      return ModRefInfo(AliasAnalysis::getModRefInfo(CS, P, Size) & MRI_Ref);

    if(MR == liberty::LoopAA::NoModRef)
      return MRI_NoModRef;

    return AliasAnalysis::getModRefInfo(CS, P, Size);
  }

  virtual ModRefInfo getModRefInfo(ImmutableCallSite CS1,
                                     ImmutableCallSite CS2) {

    liberty::LoopAA *aa = getAnalysis<liberty::LoopAA>().getTopAA();
    liberty::LoopAA::ModRefResult MR = aa->modref(CS1.getInstruction(),
                                                  liberty::LoopAA::Same,
                                                  CS2.getInstruction(),
                                                  NULL);

    if(MR == liberty::LoopAA::Mod)
      return ModRefInfo(AliasAnalysis::getModRefInfo(CS1, CS2) & MRI_Mod);

    if(MR == liberty::LoopAA::Ref)
      return ModRefInfo(AliasAnalysis::getModRefInfo(CS1, CS2) & MRI_Ref);

    if(MR == liberty::LoopAA::NoModRef)
      return MRI_NoModRef;

    return AliasAnalysis::getModRefInfo(CS1, CS2);
  }

  void getAnalysisUsage(AnalysisUsage &AU) const {
    AliasAnalysis::getAnalysisUsage(AU);
    AU.addRequired<liberty::LoopAA>();
    AU.setPreservesAll();                         // Does not transform code
  }

  /// getAdjustedAnalysisPointer - This method is used when a pass implements
  /// an analysis interface through multiple inheritance.  If needed, it
  /// should override this to adjust the this pointer as needed for the
  /// specified pass info.
  virtual void *getAdjustedAnalysisPointer(AnalysisID PI) {
    if (PI == &AliasAnalysis::ID)
      return (AliasAnalysis*)this;
    return this;
  }
};


static RegisterPass<LoopAAToAA>
X("loop-aa-to-aa", "Convert LoopAAs to AAs", false, true);

static RegisterAnalysisGroup<liberty::LoopAA> Y(X);

char LoopAAToAA::ID = 0;
