#!/bin/bash

# $1: number of threads
# $2-: arguments

# Check if $NUM_THREAD is set, otherwise exit
NUM_THREAD=$1
COMPILE_CMD=${@:2}

if [ -z "$NUM_THREAD" ]; then
    echo "NUM_THREAD is not set"
    exit 1
fi

# Check if num thread is power of 2
if [ $(($NUM_THREAD)) -ne $(($NUM_THREAD & (~$NUM_THREAD + 1))) ]; then
    echo "Number of threads must be power of 2"
    exit 1
fi

# Convert NUM_THREAD to the mask and shift left by 8
MASK=$((($NUM_THREAD - 1) << 8))

# convert MASK to a hex string
MASK_HEX=$(printf "0x%x" $MASK)

# generate constants
for i in `seq 0 $(($NUM_THREAD - 1))`; do
    # if i is not 11 then continue
    PATTERN=$(($i << 8))
    # convert pattern to a hex string
    PATTERN_HEX=$(printf "0x%x" $PATTERN)
    echo -e "#include <stdio.h>\nconst char LOCALWRITE_MODULE=1; const size_t LOCALWRITE_MASK=$MASK_HEX; const size_t LOCALWRITE_PATTERN=$PATTERN_HEX;" | clang -x c -flto -c -o constants_$i.o - &
done
wait

# compile into binarys
for i in `seq 0 $(($NUM_THREAD - 1))`; do
    # if i is not 11 then continue
    PATTERN=$(($i << 8))
    # convert pattern to a hex string
    PATTERN_HEX=$(printf "0x%x" $PATTERN)
    EXE="$COMPILE_CMD constants_$i.o -o benchmark.slamp_$i.exe"
    echo $EXE
    $EXE &
done

# Wait for all threads to finish
wait
