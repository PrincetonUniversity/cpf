# !!!Read before any change!!!
# For all the variable definitions
# Don't use quotes
# Make sure there are no trailing spaces
# "Enjoy GNU Make"

## Start of Configuration ##

########
# LLVM #
########
compile-llvm=1

## If compile-llvm=0, provide paths to both the debug and the release versions
#llvm-install-dir-debug=/u/ziyangx/cpf-workspace-test/llvm-install-debug
#llvm-install-dir-release=/u/ziyangx/cpf-workspace-test/llvm-install-release

##########
# NOELLE #
##########
compile-noelle=1

## If compile-noelle=0, provide paths to both the debug and the release versions
#noelle-install-dir-debug=/u/ziyangx/cpf-workspace-test/noelle-install-debug
#noelle-install-dir-release=/u/ziyangx/cpf-workspace-test/noelle-install-release

## If compile-noelle=1, use this url to clone and build NOELLE from scratch
## Don't use quotes
#noelle-remote-url=https://github.com/scampanoni/noelle.git
noelle-remote-url=/u/sa8/noelle
noelle-branch=master

#######
# CPF #
#######
compile-cpf=1
## If compile-cpf=0, provide paths to both the debug and the release versions
#cpf-install-dir-debug=/u/ziyangx/cpf-workspace-test/cpf-install-debug
#cpf-install-dir-release=/u/ziyangx/cpf-workspace-test/cpf-install-release

##############
# Installing #
##############

# Make sure you have write privilege to both directories here
install-prefix=~/cpf-workspace-test
cpf-root-path=/your/local/cpf/root

# 1: verbose mode, print all internal cmake/make message to terminal
verbose=0

# Number of workers to build LLVM/CPF, NOELLE will use as many core as possible
# by default and we don't have control over it
num-workers=16

## End of Configuration ##

#######################################
## DON'T CHANGE ANYTHING BELOW HERE! ##
#######################################

# if llvm is compiled from scratch, then is the default one
ifeq (${compile-llvm}, 1)
	llvm-install-dir-debug=${install-prefix}/llvm-install-debug
	llvm-install-dir-release=${install-prefix}/llvm-install-release
endif

# if noelle is compiled from scratch, then is the default one
ifeq (${compile-noelle}, 1)
	noelle-install-dir-debug=${install-prefix}/noelle-install-debug
	noelle-install-dir-release=${install-prefix}/noelle-install-release
endif

# if cpf is compiled from scratch, then is the default one
ifeq (${compile-cpf}, 1)
	cpf-install-dir-debug=${install-prefix}/cpf-install-debug
	cpf-install-dir-release=${install-prefix}/cpf-install-release
endif

.DEFAULT_GOAL:=default

default:
	@echo Run \`make all\` to compile and install all specified components.
	@echo After the initial installation, run \`make cpf\` to only udpate cpf.
	@echo Nothing has been done.

all: copy-makefile llvm noelle cpf cpf-env-debug.rc cpf-env-release.rc
.PHONY: copy-makefile llvm noelle cpf cpf-env-debug.rc cpf-env-release.rc clean

clean:
	@echo Too dangerous! Please go to ${install-prefix} and remove by yourself

llvm: export JOBS=${num-workers}
llvm:
ifeq (${compile-llvm}, 1)
	@echo Compiling LLVM from Scratch
	mkdir -p ${install-prefix}
	- cp Makefile.llvm ${install-prefix}
ifeq (${verbose}, 1)
	set -o pipefail; \
	$(MAKE) -C ${install-prefix} -f Makefile.llvm all 2>&1 | tee ${install-prefix}/llvm.log
else
	$(MAKE) -C ${install-prefix} -f Makefile.llvm all > ${install-prefix}/llvm.log 2>&1
endif
else

ifndef llvm-install-dir-debug 
	$(error Chose not to compile llvm but llvm-install-dir-debug is not set)
endif

ifndef llvm-install-dir-release
	$(error Chose not to compile llvm but llvm-install-dir-release is not set)
endif

	@echo Using provided LLVM Debug and Release versions
    @echo LLVM Debug: ${llvm-install-dir-debug}
    @echo LLVM Release: ${llvm-install-dir-release}
endif

noelle:
ifeq (${compile-noelle}, 1)
	@echo Compiling NOELLE from Scratch
ifndef noelle-remote-url
	$(error Chose to NOELLE but noelle-remote-url is not set)
endif

ifndef noelle-branch 
	$(error Chose to compile NOELLE but noelle-branch is not set)
endif
	mkdir -p ${install-prefix}
	- cp Makefile.noelle ${install-prefix}
ifeq (${verbose}, 1)
	set -o pipefail; \
	LLVM_INSTALL_DEBUG=${llvm-install-dir-debug} \
	LLVM_INSTALL_RELEASE=${llvm-install-dir-release} \
	NOELLE_REMOTE=${noelle-remote-url} \
	NOELLE_BRANCH=${noelle-branch} \
	${MAKE} -C ${install-prefix} -f Makefile.noelle all 2>&1 | tee ${install-prefix}/noelle.log
else
	LLVM_INSTALL_DEBUG=${llvm-install-dir-debug} \
	LLVM_INSTALL_RELEASE=${llvm-install-dir-release} \
	NOELLE_REMOTE=${noelle-remote-url} \
	NOELLE_BRANCH=${noelle-branch} \
	${MAKE} -C ${install-prefix} -f Makefile.noelle all > ${install-prefix}/noelle.log 2>&1
endif

else

ifndef noelle-install-dir-debug 
	$(error Chose not to compile noelle but noelle-install-dir-debug is not set)
endif
ifndef noelle-install-dir-release
	$(error Chose not to compile noelle but noelle-install-dir-release is not set)
endif
	@echo Using provided NOELLE Debug and Release versions
	@echo NOELLE Debug: ${noelle-install-dir-debug}
	@echo NOELLE Release: ${noelle-install-dir-release}
endif

cpf: export LLVM_INSTALL_DEBUG=${llvm-install-dir-debug}
cpf: export LLVM_INSTALL_RELEASE=${llvm-install-dir-release}
cpf: export NOELLE_INSTALL_DEBUG=${noelle-install-dir-debug}
cpf: export NOELLE_INSTALL_RELEASE=${noelle-install-dir-release}
cpf: export CPF_ROOT_PATH=${cpf-root-path}
cpf: export JOBS=${num-workers}
cpf:
ifeq (${compile-cpf}, 1)
	@echo Compiling CPF from Scratch
	mkdir -p ${install-prefix}
	- cp Makefile.cpf ${install-prefix}
ifeq (${verbose}, 1)
	set -o pipefail; \
	${MAKE} -C ${install-prefix} -f Makefile.cpf all 2>&1 | tee ${install-prefix}/cpf.log
else
	${MAKE} -C ${install-prefix} -f Makefile.cpf all > ${install-prefix}/cpf.log 2>&1
endif
else
ifndef cpf-install-dir-debug 
	$(error Chose not to compile cpf but cpf-install-dir-debug is not set)
endif

ifndef cpf-install-dir-release
	$(error Chose not to compile cpf but cpf-install-dir-release is not set)
endif

	@echo Using provided CPF Debug and Release versions
	@echo CPF Debug: ${cpf-install-dir-debug}
	@echo CPF Release: ${cpf-install-dir-release}
endif

cpf-env-debug.rc:
	rm -f ${install-prefix}/$@
	@echo Generating ${install-prefix}/$@
	cp cpf-env.rc.template ${install-prefix}/$@
	sed -i "s%PC-LLVM%${llvm-install-dir-debug}%g; s%PC-NOELLE%${noelle-install-dir-debug}%g; s%PC-CPF%${cpf-install-dir-debug}%g; s%PC-REG%${cpf-root-path}/tests/scripts%g" ${install-prefix}/$@
	@echo Debug environment variables stored in ${install-prefix}/$@
	@echo

cpf-env-release.rc:
	rm -f ${install-prefix}/$@
	@echo Generating ${install-prefix}/$@ 
	cp cpf-env.rc.template ${install-prefix}/$@
	sed -i "s%PC-LLVM%${llvm-install-dir-release}%g; s%PC-NOELLE%${noelle-install-dir-release}%g; s%PC-CPF%${cpf-install-dir-release}%g; s%PC-REG%${cpf-root-path}/tests/scripts%g" ${install-prefix}/$@
	@echo  Release environment variables stored in ${install-prefix}/$@
	@echo

copy-makefile:
	mkdir -p ${install-prefix}
	- cp cpf-env.rc.template ${install-prefix}/cpf-env.rc.template
	- cp Makefile ${install-prefix}/Makefile
